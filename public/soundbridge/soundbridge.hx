import flash.events.SampleDataEvent;import flash.events.TimerEvent;import flash.media.Sound;import flash.media.SoundChannel;import flash.external.ExternalInterface;import flash.net.URLVariables;import flash.Vector;import flash.utils.ByteArray;import flash.utils.Timer;class SoundBridge {  static var channel:SoundChannel;  static var clip:flash.display.MovieClip;  static var sound:Sound;  static var genSoundCallback:String = null;  static var DEBUG:Int = 0;  static function decodeHex(data, start) {    var HEX:String = "0123456789ABCDEF";    var word:Int =  (HEX.indexOf(data.charAt(start)));    word += (HEX.indexOf(data.charAt(start + 1))) << 4;    word += (HEX.indexOf(data.charAt(start + 2))) << 8;    word += (HEX.indexOf(data.charAt(start + 3))) << 12;    return word;  }  static function soundGenerator(event:SampleDataEvent) {    if(ExternalInterface.available && (genSoundCallback != null)) {      try {        var data:String = ExternalInterface.call(genSoundCallback, 2048 * 2, event.position);        var len:Int = Math.floor(data.length / 4);        for(i in 0...len) {          var word:Int = decodeHex(data, i * 4);          var val:Float = (word - 32768.0) / 32768.0; //  + (data.charCodeAt(i*2+1) << 8)) / 32678;          event.data.writeFloat(val);          event.data.writeFloat(val);        }      } catch (msg:Dynamic) {        if (DEBUG == 1) trace(msg);      }    }  }  static function updatePeakMeter(event:TimerEvent) {    var left:Float = channel.leftPeak;    var right:Float = channel.rightPeak;    clip.graphics.beginFill(0xFFFFFF);    clip.graphics.drawRect(0, 0, 200, 30);    clip.graphics.endFill();    clip.graphics.beginFill(0xFF0000);    clip.graphics.drawRect(0,0,10 + (190 * left), 10);    clip.graphics.endFill();    clip.graphics.beginFill(0xFF0000);    clip.graphics.drawRect(0,20,10 + (190 * right), 10);    clip.graphics.endFill();  }  static function play() {    if (DEBUG == 1) trace("play: " + genSoundCallback);    if (genSoundCallback != null) {      channel = sound.play();    }  }  static function stop() {    if (DEBUG == 1) trace("stop");    channel.stop();  }  static function setCallback(callbackFun:String) {    if (DEBUG == 1) trace("callback set");    genSoundCallback = callbackFun;  }  static function main() {    clip = flash.Lib.current;    trace("V0.2 BUILD 008");    flash.system.Security.allowDomain("localhost");    // trace(flash.system.Security.sandboxType);    sound = new Sound();    sound.addEventListener(SampleDataEvent.SAMPLE_DATA,soundGenerator);    if (ExternalInterface.available) {      ExternalInterface.addCallback("play", play);      ExternalInterface.addCallback("stop", stop);      ExternalInterface.addCallback("setCallback", setCallback);    }    var peakTimer:Timer = new Timer(100);    peakTimer.addEventListener(TimerEvent.TIMER, updatePeakMeter);    peakTimer.start();  }}